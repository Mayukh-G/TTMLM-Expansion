import groovy.json.JsonSlurper
import groovy.json.JsonOutput

buildscript {
    repositories {
        maven { url = 'https://files.minecraftforge.net/maven' }
        jcenter()
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '3.+', changing: true
    }
}
apply plugin: 'net.minecraftforge.gradle'
// Only edit below this line, the above code adds and enables the necessary things for Forge to be setup.
apply plugin: 'eclipse'
apply plugin: 'maven-publish'

version = "${mc_version}" + "-" + "${mod_version}"
group = 'com.ttml.ttmlm' // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = 'TTMLM Expansion'

sourceCompatibility = targetCompatibility = compileJava.sourceCompatibility = compileJava.targetCompatibility = '1.8' // Need this here so eclipse task generates correctly.

def change_update_json() {
    // Create back_up
    def slurper = new JsonSlurper()
    File backup$json = new File("update_backup.json")
    File update$json = new File('update.json')
    assert update$json.exists() && backup$json.exists()
    if (!update$json.readLines()) update$json.write("{\n}")

    backup$json.write(JsonOutput.prettyPrint(JsonOutput.toJson(slurper.parse(update$json))))

    // Segment Automatically update the update.json file
    Map info = slurper.parse(update$json) as Map
    if (!info.isEmpty()) {
        // Homepage
        info.putIfAbsent('homepage', new_version_download)

        // Adding newer version to update.json
        boolean absent = info.get(mc_version) == null
        info.putIfAbsent(mc_version, [(version.toString()): changelog])

        if (!absent){
            HashMap inner = (HashMap) info.get(mc_version)
            inner.putIfAbsent(version.toString(), changelog)
            info.replace(mc_version, inner)
        }

        // Check and add promo
        absent = info.get('promos') == null
        info.putIfAbsent('promos', [(mc_version + "-latest"): version.toString(), (mc_version + "-recommended"): version.toString()])

        if (!absent){
            HashMap inner = (HashMap) info.get('promos')
            if (inner.replace(mc_version + "-latest", version.toString()) == null){
                inner.putIfAbsent(mc_version + "-latest", version.toString())
            }
            if (inner.replace(mc_version + "-recommended", version.toString()) == null){
                inner.putIfAbsent(mc_version + "-recommended", version.toString())
            }
            info.replace('promos', inner)
        }

    } else {
        info = [
                "homepage": new_version_download,

                (mc_version): [ (version.toString()) : changelog],

                "promos": [
                        (mc_version + "-latest"): version.toString(),
                        (mc_version + "-recommended"): version.toString()
                ]
        ]
    }

    String input_string = JsonOutput.toJson(info)
    update$json.write(JsonOutput.prettyPrint(input_string))
}

minecraft {

    // Change the update.json file. Fill it up if it's empty or add to it if it's not
    // Just a simple groovy script
    change_update_json()

    // The mappings can be changed at any time, and must be in the following format.
    // snapshot_YYYYMMDD   Snapshot are built nightly.
    // stable_#            Stables are built at the discretion of the MCP team.
    // Use non-default mappings at your own risk. they may not always work.
    // Simply re-run your setup task after changing the mappings to update your workspace.
    mappings channel: 'official', version: "${mc_version}"
    // Make sure necessary fields are public
    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')
    // makeObfSourceJar = false // an Srg named sources jar is made by default. uncomment this to disable.

    // Default run configurations.
    // These can be tweaked, removed, or duplicated as needed.
    runs {
        client {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            mods {
                ttmlm {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            mods {
                ttmlm {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            args '--mod', 'ttmlm', '--all', '--output', file('src/generated/resources/')

            mods {
                ttmlm {
                    source sourceSets.main
                }
            }
        }
    }
}

repositories {
    mavenLocal()
    maven {url('https://jitpack.io')}
//    maven { url 'https://repo1.maven.org/maven2' }
//    maven { url 'https://maven.latmod.com/' }
    maven { url "https://dvs1.progwml6.com/files/maven" }
//    maven { url 'https://maven.theillusivec4.top/' }
//    maven { url 'https://maven.tehnut.info' }
//    maven { url 'https://www.dogforce-games.com/maven/' }

}

dependencies {
    // Specify the version of Minecraft to use, If this is any group other then 'net.minecraft' it is assumed
    // that the dep is a ForgeGradle 'patcher' dependency. And it's patches will be applied.
    // The userdev artifact is a special name and will get all sorts of transformations applied to it.
    minecraft "net.minecraftforge:forge:${mc_version}-${forge_version}"

    // You may put jars on which you depend on in ./libs or you may define them like so..
    // compile "some.group:artifact:version:classifier"
    // compile "some.group:artifact:version"

    // Real examples
    // compile 'com.mod-buildcraft:buildcraft:6.0.8:dev'  // adds buildcraft to the dev env
    // compile 'com.googlecode.efficient-java-matrix-library:ejml:0.24' // adds ejml to the dev env

    // The 'provided' configuration is for optional dependencies that exist at compile-time but might not at runtime.
    // provided 'com.mod-buildcraft:buildcraft:6.0.8:dev'

    // These dependencies get remapped to your current MCP mappings
    // deobf 'com.mod-buildcraft:buildcraft:6.0.8:dev'

    // For more info...
    // http://www.gradle.org/docs/current/userguide/artifact_dependencies_tutorial.html
    // http://www.gradle.org/docs/current/userguide/dependency_management.html


    implementation 'org.jetbrains:annotations:15.0'
    compile fg.deobf('mezz.jei:jei-' + '1.16.4:7.6.1.65')

//    compile('com.github.mezz:JustEnoughItems:1.16-SNAPSHOT')
//    compileOnly fg.deobf('com.feed_the_beast.mods:ftb-gui-library:1.0.0.18')

}

// Example for how to get properties into the manifest for reading by the runtime..
jar {
    manifest {
        attributes([
            "Specification-Title": "ttmlm",
            "Specification-Vendor": "ttmlmsareus",
            "Specification-Version": "1", // We are version 1 of ourselves
            "Implementation-Title": "ttmlm",
            "Implementation-Version": "${version}",
            "Implementation-Vendor" :"ttmlmsareus",
            "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

// Example configuration to allow publishing using the maven-publish task
// This is the preferred method to reobfuscate your jar file
jar.finalizedBy('reobfJar') 
// However if you are in a multi-project build, dev time needs unobfed jar files, so you can delay the obfuscation until publishing by doing
//publish.dependsOn('reobfJar')

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact jar
        }
    }
    repositories {
        maven { url {"file:///${project.projectDir}/mcmodsrepo"} }
    }
}