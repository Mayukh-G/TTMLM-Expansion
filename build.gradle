import groovy.json.JsonSlurper
import groovy.json.JsonOutput

plugins {
    id 'eclipse'
    id 'maven-publish'
    id 'net.minecraftforge.gradle' version '5.1.+'
}

version = "${mc_version}" + "-" + "${mod_version}"
group = 'com.ttml.ttmlm' // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = 'TTMLM Expansion'

// Mojang ships Java 17 to end users in 1.18+, so your mod should target Java 17.
java.toolchain.languageVersion = JavaLanguageVersion.of(17)

println "Java: ${System.getProperty 'java.version'}, JVM: ${System.getProperty 'java.vm.version'} (${System.getProperty 'java.vendor'}), Arch: ${System.getProperty 'os.arch'}"


def change_update_json() {
    // Create back_up
    def slurper = new JsonSlurper()
    File backup$json = new File("update_backup.json")
    File update$json = new File('update.json')
    assert update$json.exists() && backup$json.exists()
    if (!update$json.readLines()) update$json.write("{\n}")

    backup$json.write(JsonOutput.prettyPrint(JsonOutput.toJson(slurper.parse(update$json))))

    // Segment Automatically update the update.json file
    Map info = slurper.parse(update$json) as Map
    if (!info.isEmpty()) {
        // Homepage
        info.putIfAbsent('homepage', new_version_download)

        // Adding newer version to update.json
        boolean absent = info.get(mc_version) == null
        info.putIfAbsent(mc_version, [(version.toString()): changelog])

        if (!absent){
            HashMap inner = (HashMap) info.get(mc_version)
            inner.putIfAbsent(version.toString(), changelog)
            info.replace(mc_version, inner)
        }

        // Check and add promo
        absent = info.get('promos') == null
        info.putIfAbsent('promos', [(mc_version + "-latest"): version.toString(), (mc_version + "-recommended"): version.toString()])

        if (!absent){
            HashMap inner = (HashMap) info.get('promos')
            if (inner.replace(mc_version + "-latest", version.toString()) == null){
                inner.putIfAbsent(mc_version + "-latest", version.toString())
            }
            if (inner.replace(mc_version + "-recommended", version.toString()) == null){
                inner.putIfAbsent(mc_version + "-recommended", version.toString())
            }
            info.replace('promos', inner)
        }

    } else {
        info = [
                "homepage": new_version_download,

                (mc_version): [ (version.toString()) : changelog],

                "promos": [
                        (mc_version + "-latest"): version.toString(),
                        (mc_version + "-recommended"): version.toString()
                ]
        ]
    }

    String input_string = JsonOutput.toJson(info)
    update$json.write(JsonOutput.prettyPrint(input_string))
}






minecraft {


    // Change the update.json file. Fill it up if it's empty or add to it if it's not
    // Just a simple groovy script
    change_update_json()

    // The mappings can be changed at any time and must be in the following format.
    // Channel:   Version:
    // official   MCVersion             Official field/method names from Mojang mapping files
    // parchment  YYYY.MM.DD-MCVersion  Open community-sourced parameter names and javadocs layered on top of official
    //
    // You must be aware of the Mojang license when using the 'official' or 'parchment' mappings.
    // See more information here: https://github.com/MinecraftForge/MCPConfig/blob/master/Mojang.md
    //
    // Parchment is an unofficial project maintained by ParchmentMC, separate from MinecraftForge
    // Additional setup is needed to use their mappings: https://github.com/ParchmentMC/Parchment/wiki/Getting-Started
    //
    // Use non-default mappings at your own risk. They may not always work.
    // Simply re-run your setup task after changing the mappings to update your workspace.
    mappings channel: 'official', version: '1.19.2'
    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    // accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg') // Currently, this location cannot be changed from the default.

    // Default run configurations.
    // These can be tweaked, removed, or duplicated as needed.
    runs {
        client {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            // The markers can be added/remove as needed separated by commas.
            // "SCAN": For mods scan.
            // "REGISTRIES": For firing of registry events.
            // "REGISTRYDUMP": For getting the contents of all registries.
            property 'forge.logging.markers', 'REGISTRIES'

            // Recommended logging level for the console
            // You can set various levels here.
            // Please read: https://stackoverflow.com/questions/2031163/when-to-use-the-different-log-levels
            property 'forge.logging.console.level', 'debug'

            // Comma-separated list of namespaces to load gametests from. Empty = all namespaces.
            property 'forge.enabledGameTestNamespaces', 'ttmlm'

            mods {
                ttmlm {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'

            property 'forge.logging.console.level', 'debug'

            property 'forge.enabledGameTestNamespaces', 'ttmlm'

            mods {
                ttmlm {
                    source sourceSets.main
                }
            }
        }

        // This run config launches GameTestServer and runs all registered gametests, then exits.
        // By default, the server will crash when no gametests are provided.
        // The gametest system is also enabled by default for other run configs under the /test command.
        gameTestServer {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'

            property 'forge.logging.console.level', 'debug'

            property 'forge.enabledGameTestNamespaces', 'ttmlm'

            mods {
                ttmlm {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'

            property 'forge.logging.console.level', 'debug'

            // Specify the modid for data generation, where to output the resulting resource, and where to look for existing resources.
            args '--mod', 'examplemod', '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')

            mods {
                ttmlm {
                    source sourceSets.main
                }
            }
        }
    }
}

// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {
    // Put repositories for dependencies here
    // ForgeGradle automatically adds the Forge maven and Maven Central for you

    mavenLocal()
    maven {url('https://jitpack.io')}

    maven { url "https://dvs1.progwml6.com/files/maven" }

    // If you have mod jar dependencies in ./libs, you can declare them as a repository like so:
    // flatDir {
    //     dir 'libs'
    // }
}

dependencies {
    // Specify the version of Minecraft to use. If this is any group other than 'net.minecraft', it is assumed
    // that the dep is a ForgeGradle 'patcher' dependency, and its patches will be applied.
    // The userdev artifact is a special name and will get all sorts of transformations applied to it.
    minecraft 'net.minecraftforge:forge:1.19.2-43.1.7'

    // Real mod deobf dependency examples - these get remapped to your current mappings
    // compileOnly fg.deobf("mezz.jei:jei-${mc_version}:${jei_version}:api") // Adds JEI API as a compile dependency
    // runtimeOnly fg.deobf("mezz.jei:jei-${mc_version}:${jei_version}") // Adds the full JEI mod as a runtime dependency
    // implementation fg.deobf("com.tterrag.registrate:Registrate:MC${mc_version}-${registrate_version}") // Adds registrate as a dependency

    // Examples using mod jars from ./libs
    // implementation fg.deobf("blank:coolmod-${mc_version}:${coolmod_version}")

    // For more info...
    // http://www.gradle.org/docs/current/userguide/artifact_dependencies_tutorial.html
    // http://www.gradle.org/docs/current/userguide/dependency_management.html
    implementation 'org.jetbrains:annotations:15.0'
    compile fg.deobf('mezz.jei:jei-' + '1.16.4:7.6.1.65')
}

// Example for how to get properties into the manifest for reading at runtime.
jar {
    manifest {
        attributes([
                "Specification-Title": "ttmlm",
                "Specification-Vendor": "ttmlmsareus",
                "Specification-Version": "1", // We are version 1 of ourselves
                "Implementation-Title": "ttmlm",
                "Implementation-Version": "${version}",
                "Implementation-Vendor" :"ttmlmsareus",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

// Example configuration to allow publishing using the maven-publish plugin
// This is the preferred method to reobfuscate your jar file
jar.finalizedBy('reobfJar')
// However if you are in a multi-project build, dev time needs unobfed jar files, so you can delay the obfuscation until publishing by doing
// publish.dependsOn('reobfJar')

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact jar
        }
    }
    repositories {
        maven {
            url "file://${project.projectDir}/mcmodsrepo"
        }
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
}
